/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as BlendRouteImport } from './pages/blend/route'
import { Route as IndexImport } from './pages/index'
import { Route as BlendIndexImport } from './pages/blend/index'
import { Route as BlendResultIndexImport } from './pages/blend/result/index'
import { Route as BlendResultPreviewImport } from './pages/blend/result/preview'

// Create/Update Routes

const BlendRouteRoute = BlendRouteImport.update({
  id: '/blend',
  path: '/blend',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BlendIndexRoute = BlendIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BlendRouteRoute,
} as any)

const BlendResultIndexRoute = BlendResultIndexImport.update({
  id: '/result/',
  path: '/result/',
  getParentRoute: () => BlendRouteRoute,
} as any)

const BlendResultPreviewRoute = BlendResultPreviewImport.update({
  id: '/result/preview',
  path: '/result/preview',
  getParentRoute: () => BlendRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/blend': {
      id: '/blend'
      path: '/blend'
      fullPath: '/blend'
      preLoaderRoute: typeof BlendRouteImport
      parentRoute: typeof rootRoute
    }
    '/blend/': {
      id: '/blend/'
      path: '/'
      fullPath: '/blend/'
      preLoaderRoute: typeof BlendIndexImport
      parentRoute: typeof BlendRouteImport
    }
    '/blend/result/preview': {
      id: '/blend/result/preview'
      path: '/result/preview'
      fullPath: '/blend/result/preview'
      preLoaderRoute: typeof BlendResultPreviewImport
      parentRoute: typeof BlendRouteImport
    }
    '/blend/result/': {
      id: '/blend/result/'
      path: '/result'
      fullPath: '/blend/result'
      preLoaderRoute: typeof BlendResultIndexImport
      parentRoute: typeof BlendRouteImport
    }
  }
}

// Create and export the route tree

interface BlendRouteRouteChildren {
  BlendIndexRoute: typeof BlendIndexRoute
  BlendResultPreviewRoute: typeof BlendResultPreviewRoute
  BlendResultIndexRoute: typeof BlendResultIndexRoute
}

const BlendRouteRouteChildren: BlendRouteRouteChildren = {
  BlendIndexRoute: BlendIndexRoute,
  BlendResultPreviewRoute: BlendResultPreviewRoute,
  BlendResultIndexRoute: BlendResultIndexRoute,
}

const BlendRouteRouteWithChildren = BlendRouteRoute._addFileChildren(
  BlendRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blend': typeof BlendRouteRouteWithChildren
  '/blend/': typeof BlendIndexRoute
  '/blend/result/preview': typeof BlendResultPreviewRoute
  '/blend/result': typeof BlendResultIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blend': typeof BlendIndexRoute
  '/blend/result/preview': typeof BlendResultPreviewRoute
  '/blend/result': typeof BlendResultIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/blend': typeof BlendRouteRouteWithChildren
  '/blend/': typeof BlendIndexRoute
  '/blend/result/preview': typeof BlendResultPreviewRoute
  '/blend/result/': typeof BlendResultIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blend'
    | '/blend/'
    | '/blend/result/preview'
    | '/blend/result'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/blend' | '/blend/result/preview' | '/blend/result'
  id:
    | '__root__'
    | '/'
    | '/blend'
    | '/blend/'
    | '/blend/result/preview'
    | '/blend/result/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlendRouteRoute: typeof BlendRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlendRouteRoute: BlendRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/blend"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/blend": {
      "filePath": "blend/route.tsx",
      "children": [
        "/blend/",
        "/blend/result/preview",
        "/blend/result/"
      ]
    },
    "/blend/": {
      "filePath": "blend/index.tsx",
      "parent": "/blend"
    },
    "/blend/result/preview": {
      "filePath": "blend/result/preview.tsx",
      "parent": "/blend"
    },
    "/blend/result/": {
      "filePath": "blend/result/index.tsx",
      "parent": "/blend"
    }
  }
}
ROUTE_MANIFEST_END */
