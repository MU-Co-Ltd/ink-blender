/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as BlendRouteRouteImport } from './pages/blend/route'
import { Route as IndexRouteImport } from './pages/index'
import { Route as BlendIndexRouteImport } from './pages/blend/index'
import { Route as BlendResultRouteRouteImport } from './pages/blend/result/route'
import { Route as BlendResultIndexRouteImport } from './pages/blend/result/index'
import { Route as BlendResultPreviewRouteImport } from './pages/blend/result/preview'

const BlendRouteRoute = BlendRouteRouteImport.update({
  id: '/blend',
  path: '/blend',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlendIndexRoute = BlendIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BlendRouteRoute,
} as any)
const BlendResultRouteRoute = BlendResultRouteRouteImport.update({
  id: '/result',
  path: '/result',
  getParentRoute: () => BlendRouteRoute,
} as any)
const BlendResultIndexRoute = BlendResultIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BlendResultRouteRoute,
} as any)
const BlendResultPreviewRoute = BlendResultPreviewRouteImport.update({
  id: '/preview',
  path: '/preview',
  getParentRoute: () => BlendResultRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blend': typeof BlendRouteRouteWithChildren
  '/blend/result': typeof BlendResultRouteRouteWithChildren
  '/blend/': typeof BlendIndexRoute
  '/blend/result/preview': typeof BlendResultPreviewRoute
  '/blend/result/': typeof BlendResultIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blend': typeof BlendIndexRoute
  '/blend/result/preview': typeof BlendResultPreviewRoute
  '/blend/result': typeof BlendResultIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/blend': typeof BlendRouteRouteWithChildren
  '/blend/result': typeof BlendResultRouteRouteWithChildren
  '/blend/': typeof BlendIndexRoute
  '/blend/result/preview': typeof BlendResultPreviewRoute
  '/blend/result/': typeof BlendResultIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blend'
    | '/blend/result'
    | '/blend/'
    | '/blend/result/preview'
    | '/blend/result/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/blend' | '/blend/result/preview' | '/blend/result'
  id:
    | '__root__'
    | '/'
    | '/blend'
    | '/blend/result'
    | '/blend/'
    | '/blend/result/preview'
    | '/blend/result/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlendRouteRoute: typeof BlendRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/blend': {
      id: '/blend'
      path: '/blend'
      fullPath: '/blend'
      preLoaderRoute: typeof BlendRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blend/': {
      id: '/blend/'
      path: '/'
      fullPath: '/blend/'
      preLoaderRoute: typeof BlendIndexRouteImport
      parentRoute: typeof BlendRouteRoute
    }
    '/blend/result': {
      id: '/blend/result'
      path: '/result'
      fullPath: '/blend/result'
      preLoaderRoute: typeof BlendResultRouteRouteImport
      parentRoute: typeof BlendRouteRoute
    }
    '/blend/result/': {
      id: '/blend/result/'
      path: '/'
      fullPath: '/blend/result/'
      preLoaderRoute: typeof BlendResultIndexRouteImport
      parentRoute: typeof BlendResultRouteRoute
    }
    '/blend/result/preview': {
      id: '/blend/result/preview'
      path: '/preview'
      fullPath: '/blend/result/preview'
      preLoaderRoute: typeof BlendResultPreviewRouteImport
      parentRoute: typeof BlendResultRouteRoute
    }
  }
}

interface BlendResultRouteRouteChildren {
  BlendResultPreviewRoute: typeof BlendResultPreviewRoute
  BlendResultIndexRoute: typeof BlendResultIndexRoute
}

const BlendResultRouteRouteChildren: BlendResultRouteRouteChildren = {
  BlendResultPreviewRoute: BlendResultPreviewRoute,
  BlendResultIndexRoute: BlendResultIndexRoute,
}

const BlendResultRouteRouteWithChildren =
  BlendResultRouteRoute._addFileChildren(BlendResultRouteRouteChildren)

interface BlendRouteRouteChildren {
  BlendResultRouteRoute: typeof BlendResultRouteRouteWithChildren
  BlendIndexRoute: typeof BlendIndexRoute
}

const BlendRouteRouteChildren: BlendRouteRouteChildren = {
  BlendResultRouteRoute: BlendResultRouteRouteWithChildren,
  BlendIndexRoute: BlendIndexRoute,
}

const BlendRouteRouteWithChildren = BlendRouteRoute._addFileChildren(
  BlendRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlendRouteRoute: BlendRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
